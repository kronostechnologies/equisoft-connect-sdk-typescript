/**
 * Equisoft /connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
    LegacyContactContactPayloadItem,
    LegacyDocumentBase64FilePayloadItem,
    LegacyUser,
} from './';

/**
 * 
 * @export
 * @interface LegacyDocumentDocumentPayloadItem
 */
export interface LegacyDocumentDocumentPayloadItem {
    /**
     * Files contained inside the document
     * @type {Array<LegacyDocumentBase64FilePayloadItem>}
     * @memberof LegacyDocumentDocumentPayloadItem
     */
    files?: Array<LegacyDocumentBase64FilePayloadItem>;
    /**
     * List of linked contacts
     * @type {Array<LegacyContactContactPayloadItem>}
     * @memberof LegacyDocumentDocumentPayloadItem
     */
    contacts?: Array<LegacyContactContactPayloadItem>;
    /**
     * external key of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentPayloadItem
     */
    externalKey?: string;
    /**
     * date start of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentPayloadItem
     */
    dateStart?: string;
    /**
     * date end of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentPayloadItem
     */
    dateEnd?: string;
    /**
     * date signature of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentPayloadItem
     */
    dateSignature?: string;
    /**
     * author of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentPayloadItem
     */
    writtenBy?: string;
    /**
     * notes of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentPayloadItem
     */
    notes?: string;
    /**
     * users related to the document
     * @type {Array<LegacyUser>}
     * @memberof LegacyDocumentDocumentPayloadItem
     */
    users?: Array<LegacyUser>;
    /**
     * id of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentPayloadItem
     */
    id?: string;
    /**
     * type of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentPayloadItem
     */
    type?: string;
    /**
     * subtype of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentPayloadItem
     */
    subType?: string;
    /**
     * name of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentPayloadItem
     */
    name?: string;
}

export function LegacyDocumentDocumentPayloadItemFromJSON(json: any): LegacyDocumentDocumentPayloadItem {
    return LegacyDocumentDocumentPayloadItemFromJSONTyped(json, false);
}

export function LegacyDocumentDocumentPayloadItemFromJSONTyped(json: any, _ignoreDiscriminator: boolean): LegacyDocumentDocumentPayloadItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'files': !exists(json, 'files') ? undefined : Array&lt;LegacyDocumentBase64FilePayloadItem&gt;FromJSON(json['files']),
        'contacts': !exists(json, 'contacts') ? undefined : Array&lt;LegacyContactContactPayloadItem&gt;FromJSON(json['contacts']),
        'externalKey': !exists(json, 'externalKey') ? undefined : json['externalKey'],
        'dateStart': !exists(json, 'dateStart') ? undefined : json['dateStart'],
        'dateEnd': !exists(json, 'dateEnd') ? undefined : json['dateEnd'],
        'dateSignature': !exists(json, 'dateSignature') ? undefined : json['dateSignature'],
        'writtenBy': !exists(json, 'writtenBy') ? undefined : json['writtenBy'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'users': !exists(json, 'users') ? undefined : Array&lt;LegacyUser&gt;FromJSON(json['users']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'subType': !exists(json, 'subType') ? undefined : json['subType'],
        'name': !exists(json, 'name') ? undefined : json['name'],
    };
}

export function LegacyDocumentDocumentPayloadItemToJSON(value?: LegacyDocumentDocumentPayloadItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'files': Array&lt;LegacyDocumentBase64FilePayloadItem&gt;ToJSON(value.files),
        'contacts': Array&lt;LegacyContactContactPayloadItem&gt;ToJSON(value.contacts),
        'externalKey': value.externalKey,
        'dateStart': value.dateStart,
        'dateEnd': value.dateEnd,
        'dateSignature': value.dateSignature,
        'writtenBy': value.writtenBy,
        'notes': value.notes,
        'users': Array&lt;LegacyUser&gt;ToJSON(value.users),
        'id': value.id,
        'type': value.type,
        'subType': value.subType,
        'name': value.name,
    };
}


