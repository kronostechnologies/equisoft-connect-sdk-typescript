/**
 * Equisoft /connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
    LegacyDocumentFile,
} from './';

/**
 * 
 * @export
 * @interface LegacyDocumentDocumentListItem
 */
export interface LegacyDocumentDocumentListItem {
    /**
     * id of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentListItem
     */
    id?: string;
    /**
     * Files contained inside the document
     * @type {Array<LegacyDocumentFile>}
     * @memberof LegacyDocumentDocumentListItem
     */
    files?: Array<LegacyDocumentFile>;
    /**
     * type of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentListItem
     */
    type?: string;
    /**
     * subtype of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentListItem
     */
    subType?: string;
    /**
     * name of the document
     * @type {string}
     * @memberof LegacyDocumentDocumentListItem
     */
    name?: string;
}

export function LegacyDocumentDocumentListItemFromJSON(json: any): LegacyDocumentDocumentListItem {
    return LegacyDocumentDocumentListItemFromJSONTyped(json, false);
}

export function LegacyDocumentDocumentListItemFromJSONTyped(json: any, _ignoreDiscriminator: boolean): LegacyDocumentDocumentListItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'files': !exists(json, 'files') ? undefined : Array&lt;LegacyDocumentFile&gt;FromJSON(json['files']),
        'type': !exists(json, 'type') ? undefined : json['type'],
        'subType': !exists(json, 'subType') ? undefined : json['subType'],
        'name': !exists(json, 'name') ? undefined : json['name'],
    };
}

export function LegacyDocumentDocumentListItemToJSON(value?: LegacyDocumentDocumentListItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'files': Array&lt;LegacyDocumentFile&gt;ToJSON(value.files),
        'type': value.type,
        'subType': value.subType,
        'name': value.name,
    };
}


