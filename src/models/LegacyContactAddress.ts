/* tslint:disable */
/* eslint-disable */
/**
 * Equisoft /connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LegacyContactAddress
 */
export interface LegacyContactAddress {
    /**
     * Unique Identifier
     * @type {number}
     * @memberof LegacyContactAddress
     */
    id?: number;
    /**
     * If the address is the main address or not (true|false)
     * @type {string}
     * @memberof LegacyContactAddress
     */
    main?: string;
    /**
     * If the address is the postal address or not (true|false)
     * @type {string}
     * @memberof LegacyContactAddress
     */
    postal?: string;
    /**
     * Address type (HOME, OFFICE, HOME2, OTHER, Custom Type Label)
     * @type {string}
     * @memberof LegacyContactAddress
     */
    type?: string;
    /**
     * Address type fieldValue id
     * @type {number}
     * @memberof LegacyContactAddress
     */
    typeId?: number;
    /**
     * First line of address of the contact
     * @type {string}
     * @memberof LegacyContactAddress
     */
    line1?: string;
    /**
     * second line of address of the contact
     * @type {string}
     * @memberof LegacyContactAddress
     */
    line2?: string;
    /**
     * city of the contact
     * @type {string}
     * @memberof LegacyContactAddress
     */
    city?: string;
    /**
     * state or province of the contact
     * @type {string}
     * @memberof LegacyContactAddress
     */
    stateProvince?: string;
    /**
     * country of the contact
     * @type {string}
     * @memberof LegacyContactAddress
     */
    country?: string;
    /**
     * postalCode of the contact
     * @type {string}
     * @memberof LegacyContactAddress
     */
    postalCode?: string;
    /**
     * Industrielle Alliance Only
     * @type {string}
     * @memberof LegacyContactAddress
     */
    civicNumber?: string;
    /**
     * Industrielle Alliance Only
     * @type {string}
     * @memberof LegacyContactAddress
     */
    road?: string;
    /**
     * Industrielle Alliance Only
     * @type {string}
     * @memberof LegacyContactAddress
     */
    extType?: string;
    /**
     * Industrielle Alliance Only
     * @type {string}
     * @memberof LegacyContactAddress
     */
    extNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyContactAddress
     */
    notes?: string;
    /**
     * true or false
     * @type {string}
     * @memberof LegacyContactAddress
     */
    locked?: string;
}

export function LegacyContactAddressFromJSON(json: any): LegacyContactAddress {
    return LegacyContactAddressFromJSONTyped(json, false);
}

export function LegacyContactAddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): LegacyContactAddress {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'main': !exists(json, 'main') ? undefined : json['main'],
        'postal': !exists(json, 'postal') ? undefined : json['postal'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'typeId': !exists(json, 'typeId') ? undefined : json['typeId'],
        'line1': !exists(json, 'line1') ? undefined : json['line1'],
        'line2': !exists(json, 'line2') ? undefined : json['line2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'stateProvince': !exists(json, 'stateProvince') ? undefined : json['stateProvince'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'postalCode': !exists(json, 'postalCode') ? undefined : json['postalCode'],
        'civicNumber': !exists(json, 'civicNumber') ? undefined : json['civicNumber'],
        'road': !exists(json, 'road') ? undefined : json['road'],
        'extType': !exists(json, 'extType') ? undefined : json['extType'],
        'extNumber': !exists(json, 'extNumber') ? undefined : json['extNumber'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'locked': !exists(json, 'locked') ? undefined : json['locked'],
    };
}

export function LegacyContactAddressToJSON(value?: LegacyContactAddress | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'main': value.main,
        'postal': value.postal,
        'type': value.type,
        'typeId': value.typeId,
        'line1': value.line1,
        'line2': value.line2,
        'city': value.city,
        'stateProvince': value.stateProvince,
        'country': value.country,
        'postalCode': value.postalCode,
        'civicNumber': value.civicNumber,
        'road': value.road,
        'extType': value.extType,
        'extNumber': value.extNumber,
        'notes': value.notes,
        'locked': value.locked,
    };
}


