/* tslint:disable */
/* eslint-disable */
/**
 * Equisoft /connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MovementDatabase,
    MovementDatabaseFromJSON,
    MovementDatabaseFromJSONTyped,
    MovementDatabaseToJSON,
    MovementUser,
    MovementUserFromJSON,
    MovementUserFromJSONTyped,
    MovementUserToJSON,
} from './';

/**
 * 
 * @export
 * @interface MovementMoveMovementAllOf
 */
export interface MovementMoveMovementAllOf {
    /**
     * 
     * @type {string}
     * @memberof MovementMoveMovementAllOf
     */
    type: MovementMoveMovementAllOfTypeEnum;
    /**
     * 
     * @type {MovementDatabase}
     * @memberof MovementMoveMovementAllOf
     */
    sourceDatabase: MovementDatabase;
    /**
     * 
     * @type {MovementDatabase}
     * @memberof MovementMoveMovementAllOf
     */
    destinationDatabase: MovementDatabase;
    /**
     * 
     * @type {Array<MovementUser>}
     * @memberof MovementMoveMovementAllOf
     */
    users: Array<MovementUser>;
}

export function MovementMoveMovementAllOfFromJSON(json: any): MovementMoveMovementAllOf {
    return MovementMoveMovementAllOfFromJSONTyped(json, false);
}

export function MovementMoveMovementAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): MovementMoveMovementAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'sourceDatabase': MovementDatabaseFromJSON(json['sourceDatabase']),
        'destinationDatabase': MovementDatabaseFromJSON(json['destinationDatabase']),
        'users': ((json['users'] as Array<any>).map(MovementUserFromJSON)),
    };
}

export function MovementMoveMovementAllOfToJSON(value?: MovementMoveMovementAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'sourceDatabase': MovementDatabaseToJSON(value.sourceDatabase),
        'destinationDatabase': MovementDatabaseToJSON(value.destinationDatabase),
        'users': ((value.users as Array<any>).map(MovementUserToJSON)),
    };
}

/**
* @export
* @enum {string}
*/
export enum MovementMoveMovementAllOfTypeEnum {
    MOVE = 'MOVE'
}


