/**
 * Equisoft /connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
    LegacyProvisioningUserItem,
} from './';

/**
 * 
 * @export
 * @interface LegacyProvisioningOrganizationItem
 */
export interface LegacyProvisioningOrganizationItem {
    /**
     * Unique identifier for the organization
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    orgId?: string;
    /**
     * Organization Name
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    displayName?: string;
    /**
     * Organization status
     * In creation, Active, Maintenance
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    status?: string;
    /**
     * Organization disk usage quota. Deprecated. Always empty.
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    diskUsageQuota?: string;
    /**
     * Default language
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    lang?: string;
    /**
     * Organization main phone number
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    mainPhone?: string;
    /**
     * Organization tollFree phone number
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    tollFree?: string;
    /**
     * Organization fax phone number
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    fax?: string;
    /**
     * Organization address first line
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    address?: string;
    /**
     * Organization address second line
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    addressLine2?: string;
    /**
     * Organization address city
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    addressCity?: string;
    /**
     * Organization address state/province
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    addressState?: string;
    /**
     * Organization address postal code
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    addressPostalCode?: string;
    /**
     * Organization address country
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    addressCountry?: string;
    /**
     * Organization website url
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    webSite?: string;
    /**
     * Is the organization in single user mode or mutil user mode
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    isMultiUser?: string;
    /**
     * Is FNA enabled for the organization
     * @type {string}
     * @memberof LegacyProvisioningOrganizationItem
     */
    fnaStatus?: string;
    /**
     * Organization users
     * @type {Array<LegacyProvisioningUserItem>}
     * @memberof LegacyProvisioningOrganizationItem
     */
    users?: Array<LegacyProvisioningUserItem>;
}

export function LegacyProvisioningOrganizationItemFromJSON(json: any): LegacyProvisioningOrganizationItem {
    return LegacyProvisioningOrganizationItemFromJSONTyped(json, false);
}

export function LegacyProvisioningOrganizationItemFromJSONTyped(json: any, _ignoreDiscriminator: boolean): LegacyProvisioningOrganizationItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'orgId': !exists(json, 'orgId') ? undefined : json['orgId'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'diskUsageQuota': !exists(json, 'diskUsageQuota') ? undefined : json['diskUsageQuota'],
        'lang': !exists(json, 'lang') ? undefined : json['lang'],
        'mainPhone': !exists(json, 'mainPhone') ? undefined : json['mainPhone'],
        'tollFree': !exists(json, 'tollFree') ? undefined : json['tollFree'],
        'fax': !exists(json, 'fax') ? undefined : json['fax'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'addressLine2': !exists(json, 'addressLine2') ? undefined : json['addressLine2'],
        'addressCity': !exists(json, 'addressCity') ? undefined : json['addressCity'],
        'addressState': !exists(json, 'addressState') ? undefined : json['addressState'],
        'addressPostalCode': !exists(json, 'addressPostalCode') ? undefined : json['addressPostalCode'],
        'addressCountry': !exists(json, 'addressCountry') ? undefined : json['addressCountry'],
        'webSite': !exists(json, 'webSite') ? undefined : json['webSite'],
        'isMultiUser': !exists(json, 'isMultiUser') ? undefined : json['isMultiUser'],
        'fnaStatus': !exists(json, 'fnaStatus') ? undefined : json['fnaStatus'],
        'users': !exists(json, 'users') ? undefined : Array&lt;LegacyProvisioningUserItem&gt;FromJSON(json['users']),
    };
}

export function LegacyProvisioningOrganizationItemToJSON(value?: LegacyProvisioningOrganizationItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'orgId': value.orgId,
        'displayName': value.displayName,
        'status': value.status,
        'diskUsageQuota': value.diskUsageQuota,
        'lang': value.lang,
        'mainPhone': value.mainPhone,
        'tollFree': value.tollFree,
        'fax': value.fax,
        'address': value.address,
        'addressLine2': value.addressLine2,
        'addressCity': value.addressCity,
        'addressState': value.addressState,
        'addressPostalCode': value.addressPostalCode,
        'addressCountry': value.addressCountry,
        'webSite': value.webSite,
        'isMultiUser': value.isMultiUser,
        'fnaStatus': value.fnaStatus,
        'users': Array&lt;LegacyProvisioningUserItem&gt;ToJSON(value.users),
    };
}


