/* tslint:disable */
/* eslint-disable */
/**
 * Equisoft /connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LegacyAddUpdateResponse,
    LegacyAddUpdateResponseFromJSON,
    LegacyAddUpdateResponseToJSON,
    LegacyDocumentDocumentPayloadRequest,
    LegacyDocumentDocumentPayloadRequestFromJSON,
    LegacyDocumentDocumentPayloadRequestToJSON,
    LegacyDocumentDownloadFileResponse,
    LegacyDocumentDownloadFileResponseFromJSON,
    LegacyDocumentDownloadFileResponseToJSON,
    LegacyDocumentGetListResponse,
    LegacyDocumentGetListResponseFromJSON,
    LegacyDocumentGetListResponseToJSON,
    LegacyDocumentGetResponse,
    LegacyDocumentGetResponseFromJSON,
    LegacyDocumentGetResponseToJSON,
    LegacyDocumentUploadDocumentFileRequest,
    LegacyDocumentUploadDocumentFileRequestFromJSON,
    LegacyDocumentUploadDocumentFileRequestToJSON,
    LegacyResponse,
    LegacyResponseFromJSON,
    LegacyResponseToJSON,
} from '../models';

export interface AddDocumentRequest {
    legacyDocumentDocumentPayloadRequest: LegacyDocumentDocumentPayloadRequest;
}

export interface DeleteDocumentRequest {
    id: string;
}

export interface DeleteDocumentFileRequest {
    id: string;
}

export interface DownloadDocumentFileRequest {
    id: string;
}

export interface GetDocumentRequest {
    id: string;
}

export interface UpdateDocumentRequest {
    legacyDocumentDocumentPayloadRequest: LegacyDocumentDocumentPayloadRequest;
}

export interface UploadDocumentFileRequest {
    id: string;
    legacyDocumentUploadDocumentFileRequest: LegacyDocumentUploadDocumentFileRequest;
}

/**
 * 
 */
export class LegacyDocumentApi extends runtime.BaseAPI {

    /**
     * Create a new document.
     */
    async addDocumentRaw(requestParameters: AddDocumentRequest): Promise<runtime.ApiResponse<LegacyAddUpdateResponse>> {
        if (requestParameters.legacyDocumentDocumentPayloadRequest === null || requestParameters.legacyDocumentDocumentPayloadRequest === undefined) {
            throw new runtime.RequiredError('legacyDocumentDocumentPayloadRequest','Required parameter requestParameters.legacyDocumentDocumentPayloadRequest was null or undefined when calling addDocument.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:document"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apps/api/kronos.document.add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LegacyDocumentDocumentPayloadRequestToJSON(requestParameters.legacyDocumentDocumentPayloadRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyAddUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Create a new document.
     */
    async addDocument(requestParameters: AddDocumentRequest): Promise<LegacyAddUpdateResponse> {
        const response = await this.addDocumentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a document and it\'s related files.
     */
    async deleteDocumentRaw(requestParameters: DeleteDocumentRequest): Promise<runtime.ApiResponse<LegacyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDocument.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:document"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apps/api/kronos.document.delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyResponseFromJSON(jsonValue));
    }

    /**
     * Delete a document and it\'s related files.
     */
    async deleteDocument(requestParameters: DeleteDocumentRequest): Promise<LegacyResponse> {
        const response = await this.deleteDocumentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete one file from a document
     */
    async deleteDocumentFileRaw(requestParameters: DeleteDocumentFileRequest): Promise<runtime.ApiResponse<LegacyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDocumentFile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:document"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apps/api/kronos.document.deleteFile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyResponseFromJSON(jsonValue));
    }

    /**
     * Delete one file from a document
     */
    async deleteDocumentFile(requestParameters: DeleteDocumentFileRequest): Promise<LegacyResponse> {
        const response = await this.deleteDocumentFileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Download a file. File data is encoded in base64.
     */
    async downloadDocumentFileRaw(requestParameters: DownloadDocumentFileRequest): Promise<runtime.ApiResponse<LegacyDocumentDownloadFileResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling downloadDocumentFile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:document"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apps/api/kronos.document.downloadFile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyDocumentDownloadFileResponseFromJSON(jsonValue));
    }

    /**
     * Download a file. File data is encoded in base64.
     */
    async downloadDocumentFile(requestParameters: DownloadDocumentFileRequest): Promise<LegacyDocumentDownloadFileResponse> {
        const response = await this.downloadDocumentFileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all data for a document record.
     */
    async getDocumentRaw(requestParameters: GetDocumentRequest): Promise<runtime.ApiResponse<LegacyDocumentGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDocument.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:document"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apps/api/kronos.document.get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyDocumentGetResponseFromJSON(jsonValue));
    }

    /**
     * Get all data for a document record.
     */
    async getDocument(requestParameters: GetDocumentRequest): Promise<LegacyDocumentGetResponse> {
        const response = await this.getDocumentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Please note that a document is similar to a folder and may contain one or many files.
     * Get a list of all documents. This will return basic information about the document.
     */
    async getDocumentListRaw(): Promise<runtime.ApiResponse<LegacyDocumentGetListResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:document"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apps/api/kronos.document.getList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyDocumentGetListResponseFromJSON(jsonValue));
    }

    /**
     * Please note that a document is similar to a folder and may contain one or many files.
     * Get a list of all documents. This will return basic information about the document.
     */
    async getDocumentList(): Promise<LegacyDocumentGetListResponse> {
        const response = await this.getDocumentListRaw();
        return await response.value();
    }

    /**
     * Update a document.
     */
    async updateDocumentRaw(requestParameters: UpdateDocumentRequest): Promise<runtime.ApiResponse<LegacyAddUpdateResponse>> {
        if (requestParameters.legacyDocumentDocumentPayloadRequest === null || requestParameters.legacyDocumentDocumentPayloadRequest === undefined) {
            throw new runtime.RequiredError('legacyDocumentDocumentPayloadRequest','Required parameter requestParameters.legacyDocumentDocumentPayloadRequest was null or undefined when calling updateDocument.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:document"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apps/api/kronos.document.update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LegacyDocumentDocumentPayloadRequestToJSON(requestParameters.legacyDocumentDocumentPayloadRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyAddUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Update a document.
     */
    async updateDocument(requestParameters: UpdateDocumentRequest): Promise<LegacyAddUpdateResponse> {
        const response = await this.updateDocumentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Upload a new file in a document
     */
    async uploadDocumentFileRaw(requestParameters: UploadDocumentFileRequest): Promise<runtime.ApiResponse<LegacyAddUpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling uploadDocumentFile.');
        }

        if (requestParameters.legacyDocumentUploadDocumentFileRequest === null || requestParameters.legacyDocumentUploadDocumentFileRequest === undefined) {
            throw new runtime.RequiredError('legacyDocumentUploadDocumentFileRequest','Required parameter requestParameters.legacyDocumentUploadDocumentFileRequest was null or undefined when calling uploadDocumentFile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:document"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apps/api/kronos.document.uploadFile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LegacyDocumentUploadDocumentFileRequestToJSON(requestParameters.legacyDocumentUploadDocumentFileRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyAddUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Upload a new file in a document
     */
    async uploadDocumentFile(requestParameters: UploadDocumentFileRequest): Promise<LegacyAddUpdateResponse> {
        const response = await this.uploadDocumentFileRaw(requestParameters);
        return await response.value();
    }

}
