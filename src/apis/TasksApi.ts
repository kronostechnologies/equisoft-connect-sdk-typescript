/**
 * Equisoft /connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InternalNotesCreateNotePayload,
    InternalNotesCreateNotePayloadToJSON,
    InternalNotesCreateNoteResponse,
    InternalNotesCreateNoteResponseFromJSON,
    InternalNotesHistoryType,
    InternalNotesNoteList,
    InternalNotesNoteListFromJSON,
    InternalNotesPatchNotePayload,
    InternalNotesPatchNotePayloadToJSON,
    InternalNotesPatchNoteResponse,
    InternalNotesPatchNoteResponseFromJSON,
    TasksCreateTaskPayload,
    TasksCreateTaskPayloadToJSON,
    TasksCreateTaskResponse,
    TasksCreateTaskResponseFromJSON,
    TasksDueDateFilter,
    TasksListTaskResponse,
    TasksListTaskResponseFromJSON,
    TasksOrderByType,
    TasksPatchTaskPayload,
    TasksPatchTaskPayloadToJSON,
    TasksPatchTaskResponse,
    TasksPatchTaskResponseFromJSON,
    TasksTask,
    TasksTaskFromJSON,
    TasksTransferToCompletedResponse,
    TasksTransferToCompletedResponseFromJSON,
} from '../models';

export interface ArchiveTaskInternalNoteRequest {
    taskId: string;
    noteId: number;
    acceptLanguage?: string;
}

export interface CreateTaskRequest {
    tasksCreateTaskPayload: TasksCreateTaskPayload;
    acceptLanguage?: string;
}

export interface CreateTaskInternalNoteRequest {
    taskId: string;
    internalNotesCreateNotePayload: InternalNotesCreateNotePayload;
    acceptLanguage?: string;
}

export interface DeleteTaskRequest {
    taskId: string;
}

export interface GetTaskRequest {
    taskId: string;
    acceptLanguage?: string;
}

export interface GetTaskInternalNoteListRequest {
    taskId: string;
    history?: InternalNotesHistoryType;
    acceptLanguage?: string;
}

export interface ListTasksRequest {
    ownerId?: string;
    contactIds?: Array<number>;
    minDueDate?: Date;
    maxDueDate?: Date;
    isCompleted?: boolean;
    dueDateFilter?: TasksDueDateFilter;
    orderBy?: TasksOrderByType;
    pageToken?: string;
    maxResults?: string;
    acceptLanguage?: string;
}

export interface PatchTaskRequest {
    taskId: string;
    tasksPatchTaskPayload: TasksPatchTaskPayload;
    acceptLanguage?: string;
}

export interface PatchTaskInternalNoteRequest {
    taskId: string;
    noteId: number;
    internalNotesPatchNotePayload: InternalNotesPatchNotePayload;
    acceptLanguage?: string;
}

export interface RestoreTaskInternalNoteRequest {
    taskId: string;
    noteId: number;
    acceptLanguage?: string;
}

export interface TransferTaskToCompletedRequest {
    taskId: string;
}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     * Archive an internal note for a task.
     */
    async archiveTaskInternalNoteRaw(requestParameters: ArchiveTaskInternalNoteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling archiveTaskInternalNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling archiveTaskInternalNote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:task"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/tasks/{taskId}/notes/{noteId}/archive`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

    }

    /**
     * Archive an internal note for a task.
     */
    async archiveTaskInternalNote(requestParameters: ArchiveTaskInternalNoteRequest): Promise<object> {
        const response = await this.archiveTaskInternalNoteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a task.
     */
    async createTaskRaw(requestParameters: CreateTaskRequest): Promise<runtime.ApiResponse<TasksCreateTaskResponse>> {
        if (requestParameters.tasksCreateTaskPayload === null || requestParameters.tasksCreateTaskPayload === undefined) {
            throw new runtime.RequiredError('tasksCreateTaskPayload','Required parameter requestParameters.tasksCreateTaskPayload was null or undefined when calling createTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:task"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TasksCreateTaskPayloadToJSON(requestParameters.tasksCreateTaskPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksCreateTaskResponseFromJSON(jsonValue));
    }

    /**
     * Create a task.
     */
    async createTask(requestParameters: CreateTaskRequest): Promise<TasksCreateTaskResponse> {
        const response = await this.createTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * Add an internal note to a task.
     */
    async createTaskInternalNoteRaw(requestParameters: CreateTaskInternalNoteRequest): Promise<runtime.ApiResponse<InternalNotesCreateNoteResponse>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling createTaskInternalNote.');
        }

        if (requestParameters.internalNotesCreateNotePayload === null || requestParameters.internalNotesCreateNotePayload === undefined) {
            throw new runtime.RequiredError('internalNotesCreateNotePayload','Required parameter requestParameters.internalNotesCreateNotePayload was null or undefined when calling createTaskInternalNote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:task"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/tasks/{taskId}/notes`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InternalNotesCreateNotePayloadToJSON(requestParameters.internalNotesCreateNotePayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalNotesCreateNoteResponseFromJSON(jsonValue));
    }

    /**
     * Add an internal note to a task.
     */
    async createTaskInternalNote(requestParameters: CreateTaskInternalNoteRequest): Promise<InternalNotesCreateNoteResponse> {
        const response = await this.createTaskInternalNoteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a task.
     */
    async deleteTaskRaw(requestParameters: DeleteTaskRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling deleteTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:task"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/tasks/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

    }

    /**
     * Delete a task.
     */
    async deleteTask(requestParameters: DeleteTaskRequest): Promise<object> {
        const response = await this.deleteTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return the detail of a task.
     */
    async getTaskRaw(requestParameters: GetTaskRequest): Promise<runtime.ApiResponse<TasksTask>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling getTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:task"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/tasks/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksTaskFromJSON(jsonValue));
    }

    /**
     * Return the detail of a task.
     */
    async getTask(requestParameters: GetTaskRequest): Promise<TasksTask> {
        const response = await this.getTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the internal notes list for a task.
     */
    async getTaskInternalNoteListRaw(requestParameters: GetTaskInternalNoteListRequest): Promise<runtime.ApiResponse<InternalNotesNoteList>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling getTaskInternalNoteList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.history !== undefined) {
            queryParameters['history'] = requestParameters.history;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:task"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/tasks/{taskId}/notes`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalNotesNoteListFromJSON(jsonValue));
    }

    /**
     * Get the internal notes list for a task.
     */
    async getTaskInternalNoteList(requestParameters: GetTaskInternalNoteListRequest): Promise<InternalNotesNoteList> {
        const response = await this.getTaskInternalNoteListRaw(requestParameters);
        return await response.value();
    }

    /**
     * List or search tasks.
     */
    async listTasksRaw(requestParameters: ListTasksRequest): Promise<runtime.ApiResponse<TasksListTaskResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ownerId !== undefined) {
            queryParameters['ownerId'] = requestParameters.ownerId;
        }

        if (requestParameters.contactIds !== undefined) {
            queryParameters['contactIds'] = requestParameters.contactIds;
        }

        if (requestParameters.minDueDate !== undefined) {
            queryParameters['minDueDate'] = (requestParameters.minDueDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.maxDueDate !== undefined) {
            queryParameters['maxDueDate'] = (requestParameters.maxDueDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.isCompleted !== undefined) {
            queryParameters['isCompleted'] = requestParameters.isCompleted;
        }

        if (requestParameters.dueDateFilter !== undefined) {
            queryParameters['dueDateFilter'] = requestParameters.dueDateFilter;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.pageToken !== undefined) {
            queryParameters['pageToken'] = requestParameters.pageToken;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksListTaskResponseFromJSON(jsonValue));
    }

    /**
     * List or search tasks.
     */
    async listTasks(requestParameters: ListTasksRequest): Promise<TasksListTaskResponse> {
        const response = await this.listTasksRaw(requestParameters);
        return await response.value();
    }

    /**
     * Partially update a task.
     */
    async patchTaskRaw(requestParameters: PatchTaskRequest): Promise<runtime.ApiResponse<TasksPatchTaskResponse>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling patchTask.');
        }

        if (requestParameters.tasksPatchTaskPayload === null || requestParameters.tasksPatchTaskPayload === undefined) {
            throw new runtime.RequiredError('tasksPatchTaskPayload','Required parameter requestParameters.tasksPatchTaskPayload was null or undefined when calling patchTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:task"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/tasks/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TasksPatchTaskPayloadToJSON(requestParameters.tasksPatchTaskPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksPatchTaskResponseFromJSON(jsonValue));
    }

    /**
     * Partially update a task.
     */
    async patchTask(requestParameters: PatchTaskRequest): Promise<TasksPatchTaskResponse> {
        const response = await this.patchTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * Add an internal note to a task.
     */
    async patchTaskInternalNoteRaw(requestParameters: PatchTaskInternalNoteRequest): Promise<runtime.ApiResponse<InternalNotesPatchNoteResponse>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling patchTaskInternalNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling patchTaskInternalNote.');
        }

        if (requestParameters.internalNotesPatchNotePayload === null || requestParameters.internalNotesPatchNotePayload === undefined) {
            throw new runtime.RequiredError('internalNotesPatchNotePayload','Required parameter requestParameters.internalNotesPatchNotePayload was null or undefined when calling patchTaskInternalNote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:task"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/tasks/{taskId}/notes/{noteId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InternalNotesPatchNotePayloadToJSON(requestParameters.internalNotesPatchNotePayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalNotesPatchNoteResponseFromJSON(jsonValue));
    }

    /**
     * Add an internal note to a task.
     */
    async patchTaskInternalNote(requestParameters: PatchTaskInternalNoteRequest): Promise<InternalNotesPatchNoteResponse> {
        const response = await this.patchTaskInternalNoteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Restore an archived internal note for a task.
     */
    async restoreTaskInternalNoteRaw(requestParameters: RestoreTaskInternalNoteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling restoreTaskInternalNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling restoreTaskInternalNote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:task"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/tasks/{taskId}/notes/{noteId}/restore`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

    }

    /**
     * Restore an archived internal note for a task.
     */
    async restoreTaskInternalNote(requestParameters: RestoreTaskInternalNoteRequest): Promise<object> {
        const response = await this.restoreTaskInternalNoteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Transfer a task to completed/done.
     */
    async transferTaskToCompletedRaw(requestParameters: TransferTaskToCompletedRequest): Promise<runtime.ApiResponse<TasksTransferToCompletedResponse>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling transferTaskToCompleted.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:task"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/tasks/{taskId}/transferToCompleted`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TasksTransferToCompletedResponseFromJSON(jsonValue));
    }

    /**
     * Transfer a task to completed/done.
     */
    async transferTaskToCompleted(requestParameters: TransferTaskToCompletedRequest): Promise<TasksTransferToCompletedResponse> {
        const response = await this.transferTaskToCompletedRaw(requestParameters);
        return await response.value();
    }

}
