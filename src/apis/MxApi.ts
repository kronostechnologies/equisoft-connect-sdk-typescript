/**
 * Equisoft /connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MxRecipientsPayload,
    MxRecipientsPayloadToJSON,
    MxValidateRecipientsResponse,
    MxValidateRecipientsResponseFromJSON,
} from '../models';

export interface ValidateRecipientsRequest {
    mxRecipientsPayload: MxRecipientsPayload;
}

/**
 * 
 */
export class MxApi extends runtime.BaseAPI {

    /**
     * Validate recipients
     */
    async validateRecipientsRaw(requestParameters: ValidateRecipientsRequest): Promise<runtime.ApiResponse<MxValidateRecipientsResponse>> {
        if (requestParameters.mxRecipientsPayload === null || requestParameters.mxRecipientsPayload === undefined) {
            throw new runtime.RequiredError('mxRecipientsPayload','Required parameter requestParameters.mxRecipientsPayload was null or undefined when calling validateRecipients.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["profile"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/app/mail/validateRecipients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MxRecipientsPayloadToJSON(requestParameters.mxRecipientsPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MxValidateRecipientsResponseFromJSON(jsonValue));
    }

    /**
     * Validate recipients
     */
    async validateRecipients(requestParameters: ValidateRecipientsRequest): Promise<MxValidateRecipientsResponse> {
        const response = await this.validateRecipientsRaw(requestParameters);
        return await response.value();
    }

}
