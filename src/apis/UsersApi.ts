/**
 * Equisoft /connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ContextUserContext,
    ContextUserContextFromJSON,
    UsersUser,
    UsersUserFromJSON,
} from '../models';

export interface GetCurrentUserRequest {
    acceptLanguage?: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Get informations about the current user
     */
    async getCurrentUserRaw(requestParameters: GetCurrentUserRequest): Promise<runtime.ApiResponse<UsersUser>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersUserFromJSON(jsonValue));
    }

    /**
     * Get informations about the current user
     */
    async getCurrentUser(requestParameters: GetCurrentUserRequest): Promise<UsersUser> {
        const response = await this.getCurrentUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get user context metadata.
     */
    async getUserContextRaw(): Promise<runtime.ApiResponse<ContextUserContext>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/context`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextUserContextFromJSON(jsonValue));
    }

    /**
     * Get user context metadata.
     */
    async getUserContext(): Promise<ContextUserContext> {
        const response = await this.getUserContextRaw();
        return await response.value();
    }

}
