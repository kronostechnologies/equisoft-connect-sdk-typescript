/**
 * Equisoft /connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GatewaysAccessesCreateAccessResponse,
    GatewaysAccessesCreateAccessResponseFromJSON,
    GatewaysAccessesCreateEquisoftAnalyzeAccessPayload,
    GatewaysAccessesCreateEquisoftAnalyzeAccessPayloadToJSON,
    GatewaysAccessesListGatewayAccessesResponse,
    GatewaysAccessesListGatewayAccessesResponseFromJSON,
    GatewaysAccessesPatchEquisoftAnalyzeAccessPayload,
    GatewaysAccessesPatchEquisoftAnalyzeAccessPayloadToJSON,
    GatewaysListCredentialsResponse,
    GatewaysListCredentialsResponseFromJSON,
} from '../models';

export interface CreateEquisoftAnalyzeAccessRequest {
    gatewaysAccessesCreateEquisoftAnalyzeAccessPayload: GatewaysAccessesCreateEquisoftAnalyzeAccessPayload;
}

export interface DeleteEquisoftAnalyzeAccessRequest {
    accessId: number;
}

export interface ListEquisoftAnalyzeAccessesRequest {
    userUuid?: string;
}

export interface ListGenericCredentialsRequest {
    gatewayName: string;
    includeSsn?: boolean;
}

export interface PatchEquisoftAnalyzeAccessRequest {
    accessId: number;
    gatewaysAccessesPatchEquisoftAnalyzeAccessPayload: GatewaysAccessesPatchEquisoftAnalyzeAccessPayload;
}

/**
 * 
 */
export class GatewaysApi extends runtime.BaseAPI {

    /**
     * Create a user access configuration for Equisoft/analyze gateway
     */
    async createEquisoftAnalyzeAccessRaw(requestParameters: CreateEquisoftAnalyzeAccessRequest): Promise<runtime.ApiResponse<GatewaysAccessesCreateAccessResponse>> {
        if (requestParameters.gatewaysAccessesCreateEquisoftAnalyzeAccessPayload === null || requestParameters.gatewaysAccessesCreateEquisoftAnalyzeAccessPayload === undefined) {
            throw new runtime.RequiredError('gatewaysAccessesCreateEquisoftAnalyzeAccessPayload','Required parameter requestParameters.gatewaysAccessesCreateEquisoftAnalyzeAccessPayload was null or undefined when calling createEquisoftAnalyzeAccess.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:datagateway"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/gateways/equisoftAnalyze/accesses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GatewaysAccessesCreateEquisoftAnalyzeAccessPayloadToJSON(requestParameters.gatewaysAccessesCreateEquisoftAnalyzeAccessPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewaysAccessesCreateAccessResponseFromJSON(jsonValue));
    }

    /**
     * Create a user access configuration for Equisoft/analyze gateway
     */
    async createEquisoftAnalyzeAccess(requestParameters: CreateEquisoftAnalyzeAccessRequest): Promise<GatewaysAccessesCreateAccessResponse> {
        const response = await this.createEquisoftAnalyzeAccessRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete user access configuration for given gateway
     */
    async deleteEquisoftAnalyzeAccessRaw(requestParameters: DeleteEquisoftAnalyzeAccessRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.accessId === null || requestParameters.accessId === undefined) {
            throw new runtime.RequiredError('accessId','Required parameter requestParameters.accessId was null or undefined when calling deleteEquisoftAnalyzeAccess.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:datagateway"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/gateways/equisoftAnalyze/accesses/{accessId}`.replace(`{${"accessId"}}`, encodeURIComponent(String(requestParameters.accessId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete user access configuration for given gateway
     */
    async deleteEquisoftAnalyzeAccess(requestParameters: DeleteEquisoftAnalyzeAccessRequest): Promise<object> {
        const response = await this.deleteEquisoftAnalyzeAccessRaw(requestParameters);
        return await response.value();
    }

    /**
     * List user accesses configuration for equisoft/analyze gateway
     */
    async listEquisoftAnalyzeAccessesRaw(requestParameters: ListEquisoftAnalyzeAccessesRequest): Promise<runtime.ApiResponse<GatewaysAccessesListGatewayAccessesResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userUuid !== undefined) {
            queryParameters['userUuid'] = requestParameters.userUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:datagateway"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/gateways/equisoftAnalyze/accesses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewaysAccessesListGatewayAccessesResponseFromJSON(jsonValue));
    }

    /**
     * List user accesses configuration for equisoft/analyze gateway
     */
    async listEquisoftAnalyzeAccesses(requestParameters: ListEquisoftAnalyzeAccessesRequest): Promise<GatewaysAccessesListGatewayAccessesResponse> {
        const response = await this.listEquisoftAnalyzeAccessesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listGenericCredentialsRaw(requestParameters: ListGenericCredentialsRequest): Promise<runtime.ApiResponse<GatewaysListCredentialsResponse>> {
        if (requestParameters.gatewayName === null || requestParameters.gatewayName === undefined) {
            throw new runtime.RequiredError('gatewayName','Required parameter requestParameters.gatewayName was null or undefined when calling listGenericCredentials.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeSsn !== undefined) {
            queryParameters['includeSsn'] = requestParameters.includeSsn;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:datagateway"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/gateways/generic/{gatewayName}/credentials`.replace(`{${"gatewayName"}}`, encodeURIComponent(String(requestParameters.gatewayName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewaysListCredentialsResponseFromJSON(jsonValue));
    }

    /**
     */
    async listGenericCredentials(requestParameters: ListGenericCredentialsRequest): Promise<GatewaysListCredentialsResponse> {
        const response = await this.listGenericCredentialsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update user access configuration for Equisoft/analyze gateway
     */
    async patchEquisoftAnalyzeAccessRaw(requestParameters: PatchEquisoftAnalyzeAccessRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.accessId === null || requestParameters.accessId === undefined) {
            throw new runtime.RequiredError('accessId','Required parameter requestParameters.accessId was null or undefined when calling patchEquisoftAnalyzeAccess.');
        }

        if (requestParameters.gatewaysAccessesPatchEquisoftAnalyzeAccessPayload === null || requestParameters.gatewaysAccessesPatchEquisoftAnalyzeAccessPayload === undefined) {
            throw new runtime.RequiredError('gatewaysAccessesPatchEquisoftAnalyzeAccessPayload','Required parameter requestParameters.gatewaysAccessesPatchEquisoftAnalyzeAccessPayload was null or undefined when calling patchEquisoftAnalyzeAccess.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:datagateway"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/gateways/equisoftAnalyze/accesses/{accessId}`.replace(`{${"accessId"}}`, encodeURIComponent(String(requestParameters.accessId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GatewaysAccessesPatchEquisoftAnalyzeAccessPayloadToJSON(requestParameters.gatewaysAccessesPatchEquisoftAnalyzeAccessPayload),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update user access configuration for Equisoft/analyze gateway
     */
    async patchEquisoftAnalyzeAccess(requestParameters: PatchEquisoftAnalyzeAccessRequest): Promise<object> {
        const response = await this.patchEquisoftAnalyzeAccessRaw(requestParameters);
        return await response.value();
    }

}
