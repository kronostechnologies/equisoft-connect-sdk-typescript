/**
 * Equisoft /connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LegacyProvisioningGetOrganizationListResponse,
    LegacyProvisioningGetOrganizationListResponseFromJSON,
    LegacyProvisioningGetOrganizationResponse,
    LegacyProvisioningGetOrganizationResponseFromJSON,
} from '../models';

export interface GetOrganizationRequest {
    orgId: string;
}

/**
 * 
 */
export class LegacyProvisioningApi extends runtime.BaseAPI {

    /**
     * Get all informations about an organization.
     */
    async getOrganizationRaw(requestParameters: GetOrganizationRequest): Promise<runtime.ApiResponse<LegacyProvisioningGetOrganizationResponse>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getOrganization.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.orgId !== undefined) {
            queryParameters['orgId'] = requestParameters.orgId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:database", "crm:user"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apps/provisioning/kronos.provisioning.getOrganization`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyProvisioningGetOrganizationResponseFromJSON(jsonValue));
    }

    /**
     * Get all informations about an organization.
     */
    async getOrganization(requestParameters: GetOrganizationRequest): Promise<LegacyProvisioningGetOrganizationResponse> {
        const response = await this.getOrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all organizations
     */
    async getOrganizationListRaw(): Promise<runtime.ApiResponse<LegacyProvisioningGetOrganizationListResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:database", "crm:user"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/apps/provisioning/kronos.provisioning.getOrganizationList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyProvisioningGetOrganizationListResponseFromJSON(jsonValue));
    }

    /**
     * List all organizations
     */
    async getOrganizationList(): Promise<LegacyProvisioningGetOrganizationListResponse> {
        const response = await this.getOrganizationListRaw();
        return await response.value();
    }

}
