/**
 * Equisoft /connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LaserAppLaserAppAnywhereResponse,
    LaserAppLaserAppAnywhereResponseFromJSON,
} from '../models';

export interface DownloadLaserAppEnterpriseContactDataRequest {
    contactId: number;
}

export interface RedirectContactToLaserAppAnywhereRequest {
    contactId: number;
}

/**
 * 
 */
export class IntegrationsApi extends runtime.BaseAPI {

    /**
     * Download contact data for LaserApp Enterprise.
     */
    async downloadLaserAppEnterpriseContactDataRaw(requestParameters: DownloadLaserAppEnterpriseContactDataRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling downloadLaserAppEnterpriseContactData.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:contact"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/app/integrations/laserapp/enterprise/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download contact data for LaserApp Enterprise.
     */
    async downloadLaserAppEnterpriseContactData(requestParameters: DownloadLaserAppEnterpriseContactDataRequest): Promise<void> {
        await this.downloadLaserAppEnterpriseContactDataRaw(requestParameters);
    }

    /**
     * Redirect contact to LaserApp Anywhere.
     */
    async redirectContactToLaserAppAnywhereRaw(requestParameters: RedirectContactToLaserAppAnywhereRequest): Promise<runtime.ApiResponse<LaserAppLaserAppAnywhereResponse>> {
        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling redirectContactToLaserAppAnywhere.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:contact"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/app/integrations/laserapp/anywhere/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LaserAppLaserAppAnywhereResponseFromJSON(jsonValue));
    }

    /**
     * Redirect contact to LaserApp Anywhere.
     */
    async redirectContactToLaserAppAnywhere(requestParameters: RedirectContactToLaserAppAnywhereRequest): Promise<LaserAppLaserAppAnywhereResponse> {
        const response = await this.redirectContactToLaserAppAnywhereRaw(requestParameters);
        return await response.value();
    }

}
