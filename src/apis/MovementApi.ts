/* tslint:disable */
/* eslint-disable */
/**
 * Equisoft /connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MovementAddMovementResponse,
    MovementAddMovementResponseFromJSON,
    MovementAddMovementResponseToJSON,
    MovementGetStatusResponse,
    MovementGetStatusResponseFromJSON,
    MovementGetStatusResponseToJSON,
    MovementListMovementResponse,
    MovementListMovementResponseFromJSON,
    MovementListMovementResponseToJSON,
    MovementMovementPayload,
    MovementMovementPayloadFromJSON,
    MovementMovementPayloadToJSON,
    MovementValidationErrorResponse,
    MovementValidationErrorResponseFromJSON,
    MovementValidationErrorResponseToJSON,
} from '../models';

export interface AddMovementRequest {
    movementMovementPayload: MovementMovementPayload;
}

export interface CancelMovementRequest {
    movementId: number;
}

export interface DeleteMovementRequest {
    movementId: number;
}

export interface GetMovementStatusRequest {
    movementId: number;
}

/**
 * 
 */
export class MovementApi extends runtime.BaseAPI {

    /**
     */
    async addMovementRaw(requestParameters: AddMovementRequest): Promise<runtime.ApiResponse<MovementAddMovementResponse>> {
        if (requestParameters.movementMovementPayload === null || requestParameters.movementMovementPayload === undefined) {
            throw new runtime.RequiredError('movementMovementPayload','Required parameter requestParameters.movementMovementPayload was null or undefined when calling addMovement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:movement"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/movements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MovementMovementPayloadToJSON(requestParameters.movementMovementPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MovementAddMovementResponseFromJSON(jsonValue));
    }

    /**
     */
    async addMovement(requestParameters: AddMovementRequest): Promise<MovementAddMovementResponse> {
        const response = await this.addMovementRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async cancelMovementRaw(requestParameters: CancelMovementRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.movementId === null || requestParameters.movementId === undefined) {
            throw new runtime.RequiredError('movementId','Required parameter requestParameters.movementId was null or undefined when calling cancelMovement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:movement"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/movements/{movementId}/cancel`.replace(`{${"movementId"}}`, encodeURIComponent(String(requestParameters.movementId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async cancelMovement(requestParameters: CancelMovementRequest): Promise<object> {
        const response = await this.cancelMovementRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteMovementRaw(requestParameters: DeleteMovementRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.movementId === null || requestParameters.movementId === undefined) {
            throw new runtime.RequiredError('movementId','Required parameter requestParameters.movementId was null or undefined when calling deleteMovement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:movement"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/movements/{movementId}`.replace(`{${"movementId"}}`, encodeURIComponent(String(requestParameters.movementId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async deleteMovement(requestParameters: DeleteMovementRequest): Promise<object> {
        const response = await this.deleteMovementRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getMovementStatusRaw(requestParameters: GetMovementStatusRequest): Promise<runtime.ApiResponse<MovementGetStatusResponse>> {
        if (requestParameters.movementId === null || requestParameters.movementId === undefined) {
            throw new runtime.RequiredError('movementId','Required parameter requestParameters.movementId was null or undefined when calling getMovementStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:movement"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/movements/{movementId}/status`.replace(`{${"movementId"}}`, encodeURIComponent(String(requestParameters.movementId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MovementGetStatusResponseFromJSON(jsonValue));
    }

    /**
     */
    async getMovementStatus(requestParameters: GetMovementStatusRequest): Promise<MovementGetStatusResponse> {
        const response = await this.getMovementStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listMovementsRaw(): Promise<runtime.ApiResponse<MovementListMovementResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["crm:movement"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/crm/api/v1/movements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MovementListMovementResponseFromJSON(jsonValue));
    }

    /**
     */
    async listMovements(): Promise<MovementListMovementResponse> {
        const response = await this.listMovementsRaw();
        return await response.value();
    }

}
